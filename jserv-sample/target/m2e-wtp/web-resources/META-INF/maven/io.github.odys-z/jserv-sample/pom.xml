<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.github.odys-z</groupId>
  <artifactId>jserv-sample</artifactId>
  <packaging>war</packaging>
  <version>1.0.0-SNAPSHOT</version>
  <name>jserv-sample Maven Webapp</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<maven.compiler.source>1.8</maven.compiler.source>
	<maven.compiler.target>1.8</maven.compiler.target>
	<failOnMissingWebXml>false</failOnMissingWebXml>
  </properties>

  <repositories>
  	<repository>
  		<id>sonatype-snapshots</id>
  		<url>https://oss.sonatype.org/content/repositories/snapshots</url>
  	</repository>
  </repositories>

  <dependencies>
	<dependency>
    	<groupId>org.junit.jupiter</groupId>
    	<artifactId>junit-jupiter-engine</artifactId>
    	<version>5.3.1</version>
    	<scope>test</scope>
	</dependency>

    <dependency>
    	<groupId>javax.servlet</groupId>
    	<artifactId>javax.servlet-api</artifactId>
    	<version>3.0.1</version>
    </dependency> 

   	<dependency>
		<!-- As sonatype SNAPSHOT is updating on a daily base, you may update this with:
			mvn clean package -U
			to update immediately. -->
	    <groupId>io.github.odys-z</groupId>
	    <artifactId>semantic.jserv</artifactId>
	    <version>0.0.1-SNAPSHOT</version>
		<!-- provide: the semantic.jserv-x.x.x.jar is exported as jar from semantic.jserv and included in build path separately.
			So use provide to exclude packaging for runtime.
			eclipse debug on tomcat server can't find maven dependent class.
			see similar issue: https://stackoverflow.com/questions/21237339/java-lang-classnotfoundexception-org-springframework-web-context-contextloaderl
			for maven scope, see:
			https://stackoverflow.com/questions/26975818/what-is-scope-under-dependency-in-pom-xml-for
			for maven war dependency, there be be a better solution:
			https://stackoverflow.com/questions/1769586/maven-war-dependency 
			We have a wiki page disussing this:
			https://github.com/odys-z/semantic-jserv/wiki/Semantic-jserv-Troubleshootings#classnotfoundexception
	    <scope>provided</scope>
		<classifier>classes</classifier>
			-->
	</dependency>

  </dependencies>
  <build>
    <finalName>jserv-sample</finalName>
    <plugins>
    	<plugin>
    		<artifactId>maven-compiler-plugin</artifactId>
    		<version>3.7.0</version>
    		<configuration>
    		<source>1.8</source>
    		<target>1.8</target>
    		</configuration>
    	</plugin>

    	<plugin>
	        <groupId>org.apache.tomcat.maven</groupId>
	        <artifactId>tomcat7-maven-plugin</artifactId>
	        <version>2.5</version>
		</plugin>
		
		<plugin>
			<!-- http://ykyuen.wordpress.com/2009/10/30/maven-dependency-on-jarwar-package
				https://pragmaticintegrator.wordpress.com/2010/10/22/using-a-war-module-as-dependency-in-maven/
			 -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>3.2.2</version>
			<configuration>
				<useCache>true</useCache>
			</configuration>
		</plugin>
		
    </plugins>
  </build>
</project>
