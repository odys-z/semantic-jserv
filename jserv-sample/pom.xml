<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.odys-z</groupId>
  <artifactId>jserv-sample</artifactId>
  <version>1.5.0-SNAPSHOT</version>
  <name>jserv template project</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<maven.compiler.source>1.8</maven.compiler.source>
	<maven.compiler.target>1.8</maven.compiler.target>
	<failOnMissingWebXml>false</failOnMissingWebXml>
  </properties>

  <repositories>
  	<repository>
  		<id>sonatype-snapshots</id>
  		<url>https://oss.sonatype.org/content/repositories/snapshots</url>
  	</repository>
  </repositories>

  <dependencies>
  	<dependency>
     	<groupId>org.junit.jupiter</groupId>
    	<artifactId>junit-jupiter-engine</artifactId>
    	<version>5.3.1</version>
    	<scope>test</scope>
    </dependency>

    <dependency>
    	<groupId>javax.servlet</groupId>
    	<artifactId>javax.servlet-api</artifactId>
    	<version>3.0.1</version>
    </dependency>

   	<dependency>
		<!-- As sonatype SNAPSHOT is updating on a daily base, you may update this with:
			mvn clean package -U
			to update immediately. -->
	    <groupId>io.github.odys-z</groupId>
	    <artifactId>semantic.jserv</artifactId>
	    <version>1.5.0-SNAPSHOT</version>
   	</dependency>


	<!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
	<dependency>
	    <groupId>org.xerial</groupId>
	    <artifactId>sqlite-jdbc</artifactId>
	    <version>3.36.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>[8.0.25,)</version>
	</dependency>
	<!-- ojdbc7.jar
		Since oracle JDBC driver package needing license agreement, you need install ojdbc.jar like this:
		mvn install:install-file -Dfile=lib/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=12.1.0.1 -Dpackaging=jar
	-->
	<dependency>
	    <groupId>com.oracle</groupId>
	    <artifactId>ojdbc14</artifactId>
	    <version>12.1.0.1</version>
	    <!-- This is only needed when testing, but we deployed this dependency because we don't want to skip tests when deploying.
	    	see https://stackoverflow.com/questions/30108053/can-i-configure-maven-to-ignore-test-scoped-dependencies-if-im-skipping-runni
	    <scope>provided</scope>
		 -->
	</dependency>
  </dependencies>

  <scm>
  	<connection>scm:git:git://github.com/odys-z/semantic-jserv.git</connection>
  	<developerConnection>scm:git:odys-z@github.com:odys-z/semantic-jserv.git</developerConnection>
  	<url>https://github.com/odys-z/semantic-jserv</url>
  	<tag>HEAD</tag>
  </scm>

  <distributionManagement>
  	<snapshotRepository>
  		<id>ossrh</id>
  		<url>https://oss.sonatype.org/content/repositories/snapshots</url>
  		<uniqueVersion>false</uniqueVersion>
  	</snapshotRepository>
  	<repository>
  		<id>ossrh</id>
  		<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
	</repository>
  </distributionManagement>

  <build>
    <finalName>jserv-sample</finalName>
    <plugins>
    	<plugin>
    		<artifactId>maven-compiler-plugin</artifactId>
    		<version>3.7.0</version>
    		<configuration>
    		<source>1.8</source>
    		<target>1.8</target>
    		</configuration>
    	</plugin>

    	<plugin>
	        <groupId>org.apache.tomcat.maven</groupId>
	        <artifactId>tomcat7-maven-plugin</artifactId>
	        <version>2.5</version>
		</plugin>

		<plugin>
			<!-- http://ykyuen.wordpress.com/2009/10/30/maven-dependency-on-jarwar-package
				https://pragmaticintegrator.wordpress.com/2010/10/22/using-a-war-module-as-dependency-in-maven/
			 -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>3.2.2</version>
			<configuration>
				<useCache>true</useCache>
				<attachClasses>true</attachClasses>
				<!-- Also export jar classes.
					jserv-sample is a web application, but the jclient.java needing the protocols.
					Referencing a war need some tricks. see answer by Morteza Malvandi
					https://stackoverflow.com/questions/31020038/how-can-i-add-war-file-to-another-java-web-application-dependencies
				-->
                <classesClassifier>classes</classesClassifier>
			</configuration>
		</plugin>

		<!-- JavaDoc and source attachment
		 -->
		<plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-source-plugin</artifactId>
	      <version>2.2.1</version>
	      <executions>
	        <execution>
	          <id>attach-sources</id>
	          <goals>
	            <goal>jar-no-fork</goal>
	          </goals>
	        </execution>
	      </executions>
	    </plugin>

		<plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-javadoc-plugin</artifactId>
		  <configuration>
			  <additionalparam>-Xdoclint:none</additionalparam>
		  </configuration>
	      <version>3.5.0</version>
	      <executions>
	        <execution>
	          <id>attach-javadocs</id>
	          <goals>
	            <goal>jar</goal>
	          </goals>
	        </execution>
	      </executions>
	 	</plugin>
    </plugins>
  </build>
  <packaging>war</packaging>
</project>
