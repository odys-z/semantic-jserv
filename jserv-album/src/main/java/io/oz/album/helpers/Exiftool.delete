//package io.oz.album.helpers;
//
//import static io.odysz.common.LangExt.eq;
//import static io.odysz.common.LangExt.filesize;
//import static io.odysz.common.LangExt.gt;
//import static io.odysz.common.LangExt.imagesize;
//import static io.odysz.common.LangExt.isblank;
//import static io.odysz.common.LangExt.lt;
//import static java.nio.charset.StandardCharsets.UTF_8;
//import static org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM;
//
//import java.io.BufferedReader;
//import java.io.File;
//import java.io.IOException;
//import java.io.InputStream;
//import java.io.InputStreamReader;
//import java.nio.file.Files;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.nio.file.attribute.FileTime;
//import java.util.concurrent.TimeUnit;
//import java.util.concurrent.TimeoutException;
//
//import org.apache.commons.io.IOUtils;
//import org.apache.tika.metadata.Metadata;
//import org.apache.tika.metadata.TIFF;
//import org.apache.tika.metadata.TikaCoreProperties;
//
//import io.odysz.common.CheapMath;
//import io.odysz.common.Configs;
//import io.odysz.common.MimeTypes;
//import io.odysz.common.Utils;
//import io.odysz.semantics.x.SemanticException;
//import io.oz.album.peer.Exifield;
//import io.oz.album.peer.PhotoRec;
//
//public class Exiftool {
//	public static boolean verbose = false;
//	
//	public static final String exiftool = "exiftool";
//	
//	static String geox0 = "0";
//	static String geoy0 = "0";
//
//	static String cmd;
//
//	public static String init() throws InterruptedException, IOException, TimeoutException {
//		cmd = Configs.getCfg("exiftool");
//		Utils.logi("[Exiftool.init] command: %s", cmd);
//		
//		check();
//		return cmd;
//	}
//
//	@SuppressWarnings("deprecation")
//	public static PhotoRec parseExif(PhotoRec photo, String filepath) throws IOException {
//		try {
//			photo.mime = isblank(photo.mime) ?
//				Files.probeContentType(Paths.get(filepath)) : photo.mime;
//		} catch (IOException e) { }
//
//		File f = new File(filepath);
//		photo.size = f.length();
//
//		photo.exif = new Exifield();
//		Metadata metadata = parse(filepath);
//		
//		for (String name: metadata.names()) {
//			String val = metadata.get(name); 
//			if (verbose) Utils.logi(name);
//			val = Exif.escape(val);
//			// white-wash some faulty string
//			// Huawei p30 take pics with 
//			// name: ICC:Profile Description, val: "1 enUS(sRGB\0\0..." where length = 52
//			photo.exif.add(name, val);
//
//			try {
//				if (eq("Content-Type", name) && isblank(photo.mime)) // can be error
//					photo.mime = val; 
//				else if (eq("Image Height", name)) {
//					if (photo.widthHeight == null) photo.widthHeight = new int[2];
//					photo.widthHeight[1] = imagesize(val);
//				}
//				else if (eq("Image Width", name)) {
//					if (photo.widthHeight == null) photo.widthHeight = new int[2];
//					photo.widthHeight[0] = imagesize(val);
//				}
//				else if (eq("File Size", name))
//					photo.size = filesize(val);
//				else if (eq("Rotation", name))
//					photo.rotation = val;
//			} catch (Exception e) {
//				Utils.warn("Failed for parsing devide: %s, path: %s,\nname: %s, value: %s",
//							photo.device(), photo.fullpath(),
//							name, val);
//			}
//		}
//
//		if (isblank(photo.createDate)) {
//			Path file = Paths.get(filepath);
//			FileTime fd = (FileTime) Files.getAttribute(file, "creationTime");
//			photo.month(fd);
//		}
//
//		if (isblank(photo.widthHeight) && metadata.getInt(TIFF.IMAGE_WIDTH) != null && metadata.getInt(TIFF.IMAGE_LENGTH) != null) 
//			try {
//				if (verbose) Utils.logi(metadata.names());
//				photo.widthHeight = new int[]
//					// FIXME too brutal
//					{metadata.getInt(TIFF.IMAGE_WIDTH), metadata.getInt(TIFF.IMAGE_LENGTH)};
//			} catch (Exception e) { e.printStackTrace(); }
//
//		// force audio
//		if (MimeTypes.isAudio(photo.mime)) {
//			photo.widthHeight = new int[] { 16, 9 };
//			photo.wh = new int[] { 16, 9 };
//			photo.rotation = "0";
//		}
//		// another way other than by Tika
//		else if (MimeTypes.isImgVideo(photo.mime) && isblank(photo.widthHeight)) {
//			try {
//				photo.widthHeight = Exif.parseWidthHeight(filepath);
//			}
//			catch (SemanticException e) {
//				if (verbose) Utils.warn("[Exif.verbose] Exif parse failed and can't parse width & height: %s", filepath);
//				if (isblank(photo.widthHeight)) {
//					photo.widthHeight = new int[] { 3, 4 };
//					photo.wh = new int[] { 3, 4 };
//				}
//			}
//		}
//
//		if (isblank(photo.wh) && !isblank(photo.widthHeight))
//			photo.wh = eq(photo.rotation, "90") || eq(photo.rotation, "270") 
//				? CheapMath.reduceFract(photo.widthHeight[1], photo.widthHeight[0])
//				: CheapMath.reduceFract(photo.widthHeight[0], photo.widthHeight[1]);
//
//		try {
//			if ((eq("90", photo.rotation) || eq("270", photo.rotation)) && gt(photo.widthHeight[0], photo.widthHeight[1]))
//				photo.wh = CheapMath.reduceFract(photo.widthHeight[1], photo.widthHeight[0]);
//			else if ((eq("0", photo.rotation) || eq("180", photo.rotation)) && lt(photo.widthHeight[0], photo.widthHeight[1]))
//				photo.wh = CheapMath.reduceFract(photo.widthHeight[1], photo.widthHeight[0]);
//			else if (photo.widthHeight != null)
//				photo.wh = CheapMath.reduceFract(photo.widthHeight[0], photo.widthHeight[1]);
//			// else possibly not a image or video file
//		} catch (Exception e) {e.printStackTrace();}
//		
//		photo.geox = metadata.get(TikaCoreProperties.LONGITUDE);
//		if (photo.geox == null) photo.geox = geox0;
//
//		photo.geoy = metadata.get(TikaCoreProperties.LATITUDE);
//		if (photo.geoy == null) photo.geoy = geoy0;
//
//		return photo;
//	}
//	
//    public static void check() throws InterruptedException, IOException, TimeoutException {
//        Process process = null;
//        try {
//            process = Runtime.getRuntime().exec(String.format("%s -ver", cmd));
//            Thread stdErrSuckerThread = ignoreStream(process.getErrorStream(), false);
//            Thread stdOutSuckerThread = ignoreStream(process.getInputStream(), false);
//            stdErrSuckerThread.join();
//            stdOutSuckerThread.join();
//            //make the timeout parameterizable
//            boolean finished = process.waitFor(60000, TimeUnit.MILLISECONDS);
//            if (!finished) {
//                throw new TimeoutException();
//            }
//            int result = process.exitValue();
//            Utils.logi("[Exiftool.check]\n%s -ver\nexit: %s", cmd, result);
//
//        } finally {
//            if (process != null) {
//                process.destroyForcibly();
//            }
//        }
//    }
//    
//    public static Metadata parse(String path) throws IOException {
//		String[] cmds = new String[] {cmd, path};
//		Process process = null;
//		try {
//			process = Runtime.getRuntime().exec(cmds);
//
//			process.getOutputStream().close();
//
//			try (InputStream out = process.getInputStream();
//				 InputStream err = process.getErrorStream()) {
//
//				Metadata xhtml = new Metadata();
//				extractMetadata(out, xhtml);
//				ignoreStream(err, true);
//				ignoreStream(out, true);
//				return xhtml;
//			} catch (Exception e) {}
//
//		} finally {
//			try { process.waitFor(); }
//			catch (InterruptedException ignore) { }
//		}
//		return null;
//    }
//    
//    private static void extractMetadata(final InputStream stream, final Metadata metadata) {
//        Thread t = new Thread(() -> {
//            try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream, UTF_8))) {
//                String line;
//                while ((line = reader.readLine()) != null) {
//                	String[] kv = line.split(":");
//                	if (kv != null && kv.length > 0)
//                		metadata.add(kv[0].trim(), kv[1].trim());              }
//            } catch (IOException e) {
//            }
//        });
//        t.start();
//        try {
//            t.join();
//        } catch (InterruptedException ignore) {
//        }
//    }
//    
//    /**
//     * Starts a thread that reads and discards the contents of the
//     * standard stream of the given process. Potential exceptions
//     * are ignored, and the stream is closed once fully processed.
//     *
//     * @param stream       stream to sent to black hole (a k a null)
//     * @param waitForDeath when {@code true} the caller thread will be
//     *                     blocked till the death of new thread.
//     * @return The thread that is created and started
//     */
//    private static Thread ignoreStream(final InputStream stream, boolean waitForDeath) {
//        @SuppressWarnings("deprecation")
//		Thread t = new Thread(() -> {
//            try { IOUtils.copy(stream, NULL_OUTPUT_STREAM); }
//            catch (IOException e) { }
//            finally { IOUtils.closeQuietly(stream); }
//        });
//
//        t.start();
//        if (waitForDeath) {
//            try { t.join(); }
//            catch (InterruptedException ignore) { }
//        }
//        return t;
//    }
//}
