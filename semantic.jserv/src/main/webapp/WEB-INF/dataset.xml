<?xml version="1.0" encoding="UTF-8"?>
<dataset>
<t id="ds" pk="sk" columns="sk,cols,mysql,orcl,ms2k,sqlit,s-tree">
	<!-- This table is used for define sqls that can be parameterized when serving data.
		Client using 'sk' in request message to use sqls.
		Records returned by sql can be mapped into bump cases (for oracle) if 'cols' is not empty.
		Different version of sql, mysql, oracle, etc. is used according to connId and driver type,
		see connects.xml. 
		s-tree: if this field is defined, the retrieved records is translated in to an STree, with names specified as:
			0: the checked value for check box, etc, the column's value should changed to boolean.
				It's always configured as 'checked' for easyUI.
				see DatasetCfg#isColChecked(String),
			1: tabl name (ignored, used in other case),
			2: record id,
			3: parent id,
			4: fullpath (optinal),
			5: sibling sort (optional),
			6: item text,
			7: children name (default 'children', js can use this to find children, auto generated while building tree),
			8: not used flag. like: should paged by server (ignored because sql is used directly. For paging by server, see SQuery).
			Note: all element can be defined as "db field, client name", while client name is optional.
			The client name can not ignored if the client using a different name other than db field name.

		NOTE: Because semantic-jserv and jclient are case sensitive,
			  it's strongly recommended that all oracle selected columns should being double quoted.
	 -->
	<c>
  		<sk>test.tree</sk>
  		<mysql>SELECT domainId id, parentId, domainName, domainValue, sort, "others", fullpath
  			FROM a_domain order by fullpath limit 5;
  		</mysql>
  		<orcl>SELECT "domId" "id", "parentId", "domName" "domainName", "domVal" "domainValue", "sort", "remarks", "fullpath"
  			FROM "a_domain" order by "fullpath"
  		</orcl>
  		<sqlit>SELECT domainId id, parentId, domainName, domainValue, sort, "others", fullpath, stamp, upstamp
  			FROM a_domain order by fullpath;
  		</sqlit>
  		<s-tree>checked,ir_workflow,id idVue,parentId,text,,,false</s-tree>
	</c>
	
	<c>
	  	<sk>sys.menu.vue-sample</sk>
  		<mysql>SELECT funcId, parentId, funcName, funcUrl href, isUsed sort, fullpath
  			FROM a_sys_functions f order by f.fullpath
  		</mysql>
  		<s-tree>,a_sys_functions,funcId id,parentId,funcName title,,,false</s-tree>
	</c>

	<c>
	  	<sk>sys.menu.ez-test</sk>
  		<mysql>SELECT funcId, parentId, funcName, funcUrl url, isUsed sort, fullpath
  			FROM a_sys_functions f order by f.fullpath
  		</mysql>
  		<s-tree>,a_sys_functions,funcId id,parentId,funcName text,,,false</s-tree>
  	</c>
  	
  	<!-- jsample/easyui/users.html -->
	<c> <sk>projects.ez</sk>
		<mysql>select projectId, projectName, parentId, fullpath, sort
		from p_projects p where p.orgId = '%s'</mysql>
  		<s-tree>,p_projects,projectId id,parentId,fullpath,sort,projectName text,,false</s-tree>
	</c>
	<c> <sk>roles</sk>
		<mysql>select roleId as value,roleName as text from a_roles</mysql>
  	</c>
	<c> <sk>orgs</sk>
		<mysql>select orgId as value, orgName as text from a_reg_org</mysql>
  	</c>
  	<c> <sk>departs.org</sk>
  		<mysql>select departId value, orgId, departName text, departState from a_org_depart where orgId = '%s'</mysql>
  	</c>

	<!-- role-func tree -->
  	<c> <sk>trees.role_funcs</sk>
  		<mysql>select r.roleId is not null checked, funcName text, f.funcId, parentId,f.funcId sort, fullpath
  		from a_sys_functions f left outer join a_role_funcs r on r.funcId = f.funcId and r.roleId = '%s' order by fullpath</mysql>
  		<sqlit>select r.roleId is not null checked, funcName text, f.funcId, parentId,f.funcId sort, fullpath
  		from a_functions f left outer join a_role_func r on r.funcId = f.funcId and r.roleId = '%s' order by fullpath</sqlit>
  		<s-tree>checked,a_functions,funcId value,parentId,fullpath,sort,funcName text,children,false</s-tree>
  	</c>
</t>
</dataset>